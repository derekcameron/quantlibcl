#summary MCEuropeanEngine use case

To use the MCEuropeanEngine, one simply makes a call to the [http://quantlib.org/reference/class_quant_lib_1_1_make_m_c_european_engine.html MakeMCEuropeanEngine() method].  The MakeMCEuropeanEngine() method takes one argument, a boost shared pointer to an instance of the [http://quantlib.org/reference/class_quant_lib_1_1_generalized_black_scholes_process.html GeneralizedBlackScholesProcess class] (or one of its inherited classes).

==Usage==
#include <ql/quantlib.hpp>
#include <iostream>
#include <iomanip>

{{{
        // Set the number of time steps
        timeSteps = 1;

        // Create a seed for our random number BSM process
        Size mcSeed = 42;

        // Create a boost shared pointer to our MC engine
        boost::shared_ptr<PricingEngine> mcengine1;


        mcengine1 = MakeMCEuropeanEngine<PseudoRandom>(bsmProcess)
            .withSteps(timeSteps)
            .withAbsoluteTolerance(0.02)
            .withSeed(mcSeed);

        europeanOption.setPricingEngine(mcengine1);
        // Real errorEstimate = europeanOption.errorEstimate();
        std::cout << "NPV = " << europeanOption.NPV() << endl;
}}}